{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Create an OAE cluster of at least two app instances running Amazon 32 bit Linux, plus a load balancer and MySQL 5.5 database.",

    "Parameters": {
        "ElasticIP": {
            "Description": "An Amazon elastic IP to use for the NFS host",
            "Type": "String"
        },
        "InstanceType": {
            "Description": "Type of EC2 instance to launch",
            "Type": "String",
            "Default": "m1.small"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String"
        },
        "NakamuraBinaryURL": {
            "Default": "http://builds.sakaiproject.org/org.sakaiproject.nakamura.app-1.0.2.jar",
            "Description": "The URL to the OAE jar file to use. Be sure your jar includes the MySQL driver.",
            "Type": "String",
            "MinLength": "1",
            "AllowedPattern": "https?://.*",
            "ConstraintDescription": "Must be a full web URL, including http://"
        },
        "NakamuraBinaryFilename": {
            "Default": "org.sakaiproject.nakamura.app-1.0.2.jar",
            "Description": "This is the name of the file that is donwloaded from the specified URL.",
            "Type": "String"
        },
        "DBName": {
            "Default": "sparsemap",
            "Description": "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "Default": "sparseuser",
            "Description": "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "The database admin account password",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "DBInstanceClass": {
            "Default": "db.m1.small",
            "Description": "The database instance type",
            "Type": "String",
            "AllowedValues": ["db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge"],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "AlertEmail": {
            "Description": "email address to notify of operational issues",
            "Type": "String"
        },
        "MultiAZ": {
            "Default": "false",
            "Description": "true if redundant mirrored instance",
            "Type": "String",
            "AllowedValues": ["true", "false"],
            "ConstraintDescription": "must be true or false."
        },
        "WebServerPort": {
            "Default": "8080",
            "Description": "TCP/IP port for nakamura",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "65535"
        }
    },

    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "32"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "32"
            },
            "c1.xlarge": {
                "Arch": "64"
            },
            "cc1.4xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "32": "ami-76f0061f",
                "64": "ami-7341831a"
            },
            "us-west-1": {
                "32": "ami-655a0a20",
                "64": "ami-cfc7978a"
            },
            "eu-west-1": {
                "32": "ami-7fd4e10b",
                "64": "ami-31c2f645"
            },
            "ap-southeast-1": {
                "32": "ami-72621c20",
                "64": "ami-60f28c32"
            },
            "ap-northeast-1": {
                "32": "ami-8e08a38f",
                "64": "ami-a003a8a1"
            }
        },
        "InstanceTypeMap": {
            "db.m1.small": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            },
            "db.m1.large": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            },
            "db.m1.xlarge": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            },
            "db.m2.xlarge": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            },
            "db.m2.2xlarge": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            },
            "db.m2.4xlarge": {
                "CPULimit": "60",
                "FreeStorageSpaceLimit": "1024",
                "ReadIOPSLimit": "100",
                "WriteIOPSLimit": "100"
            }
        }
    },

    "Resources": {
        "AlarmTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [{
                    "Protocol": "email",
                    "Endpoint": {
                        "Ref": "AlertEmail"
                    }
                }]
            }
        },
        "ElasticLoadBalancer": {
            "Properties": {
                "Listeners": [
                {
                    "InstancePort": {
                        "Ref": "WebServerPort"
                    },
                    "PolicyNames": [
                    "p1"
                    ],
                    "Protocol": "HTTP",
                    "LoadBalancerPort": "80"
                }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Timeout": "5",
                    "Interval": "10",
                    "UnhealthyThreshold": "5",
                    "Target": {
                        "Fn::Join": [
                        "",
                        [
                        "HTTP:",
                        {
                            "Ref": "WebServerPort"
                        },
                        "/"
                        ]
                        ]
                    }
                },
                "AvailabilityZones": {
                    "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                    }
                },
                "LBCookieStickinessPolicy": [
                {
                    "CookieExpirationPeriod": "30",
                    "PolicyName": "p1"
                }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "Ec2Instance1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "SecurityGroups": [{
                    "Ref": "InstanceSecurityGroup"
                }],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    },
                    {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {
                            "Ref": "InstanceType"
                        },
                        "Arch"]
                    }]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                        "#!/bin/bash -ex", "\n",
                        "sudo yum -y install nfs-utils rpcbind", "\n",
                        "mkdir /home/ec2-user/store", "\n",
                        "sudo cat << EOF > /etc/exports", "\n",
                        "/home/ec2-user/store ", {
                            "Fn::GetAtt": ["Ec2Instance2", "PublicDnsName"]
                        },
                        "(rw,async)", "\n",
                        "sudo exportfs -ar", "\n",
                        "sudo service rpcbind start", "\n",
                        "sudo service nfs start", "\n",
                        "sudo service nfslock start", "\n",
                        "mkdir /home/ec2-user/load", "\n",
                        "cat << EOF > /home/ec2-user/load/org.sakaiproject.nakamura.lite.storage.jdbc.JDBCStorageClientPool.cfg", "\n",
                        "jdbc-driver=com.mysql.jdbc.Driver", "\n",
                        "jdbc-url=", {
                            "Fn::Join": ["", ["jdbc:mysql://",
                            {
                                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Address"]
                            },
                            ":",
                            {
                                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Port"]
                            },
                            "/",
                            {
                                "Ref": "DBName"
                            }]]
                        },
                        "\n",
                        "username=", {
                            "Ref": "DBUser"
                        },
                        "\n",
                        "password=", {
                            "Ref": "DBPassword"
                        },
                        "\n",
                        "EOF", "\n",
                        "cat << EOF > /home/ec2-user/load/org.sakaiproject.nakamura.http.usercontent.ServerProtectionServiceImpl.cfg", "\n",
                        "disable.protection.for.dev.mode=true", "\n",
                        "#untrusted.contenturl=http://", "\n",
                        "#trusted.referer=http://", {
                            "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                        },
                        "\n",
                        "#trusted.hosts=http://", {
                            "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                        },
                        "\n",
                        "EOF", "\n",
                        "cd /home/ec2-user && wget ", {
                            "Ref": "NakamuraBinaryURL"
                        },
                        "\n",
                        "java -XX:MaxPermSize=128m -Xmx512m -server -Dcom.sun.management.jmxremote -jar ", {
                            "Ref": "NakamuraBinaryFilename"
                        },
                        " -f - 1> run.log 2>&1 &", "\n"]]
                    }
                }
            }
        },
        "IPAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "InstanceId": {
                    "Ref": "Ec2Instance1"
                },
                "EIP": {
                    "Ref": "ElasticIP"
                }
            }
        },
        "Ec2Instance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "SecurityGroups": [{
                    "Ref": "InstanceSecurityGroup"
                }],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                        "Ref": "AWS::Region"
                    },
                    {
                        "Fn::FindInMap": ["AWSInstanceType2Arch", {
                            "Ref": "InstanceType"
                        },
                        "Arch"]
                    }]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                        "#!/bin/bash -ex", "\n",
                        "sudo yum -y install nfs-utils rpcbind", "\n",
                        "sudo service rpcbind start", "\n",
                        "sudo service nfslock start", "\n",
                        "sudo chkconfig --level 2345 rpcbind on", "\n",
                        "sudo chkconfig --level 2345 nfslock on", "\n",
                        "sudo mount -t nfs ", {
                            "Ref": "ElasticIP"
                        },
                        ":/home/ec2-user/store /home/ec2-user/store", "\n",
                        "mkdir /home/ec2-user/load", "\n",
                        "mkdir /home/ec2-user/store", "\n",
                        "cat << EOF > /home/ec2-user/load/org.sakaiproject.nakamura.lite.storage.jdbc.JDBCStorageClientPool.cfg", "\n",
                        "jdbc-driver=com.mysql.jdbc.Driver", "\n",
                        "jdbc-url=", {
                            "Fn::Join": ["", ["jdbc:mysql://",
                            {
                                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Address"]
                            },
                            ":",
                            {
                                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Port"]
                            },
                            "/",
                            {
                                "Ref": "DBName"
                            }]]
                        },
                        "\n",
                        "username=", {
                            "Ref": "DBUser"
                        },
                        "\n",
                        "password=", {
                            "Ref": "DBPassword"
                        },
                        "\n",
                        "EOF", "\n",
                        "cat << EOF > /home/ec2-user/load/org.sakaiproject.nakamura.http.usercontent.ServerProtectionServiceImpl.cfg", "\n",
                        "disable.protection.for.dev.mode=true", "\n",
                        "#untrusted.contenturl=http://", "\n",
                        "#trusted.referer=http://", {
                            "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                        },
                        "\n",
                        "#trusted.hosts=http://", {
                            "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                        },
                        "\n",
                        "EOF", "\n",
                        "cd /home/ec2-user && wget ", {
                            "Ref": "NakamuraBinaryURL"
                        },
                        "\n",
                        "java -XX:MaxPermSize=128m -Xmx512m -server -Dcom.sun.management.jmxremote -jar ", {
                            "Ref": "NakamuraBinaryFilename"
                        },
                        " -f - 1> run.log 2>&1 &", "\n"]]
                    }
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH, NFS, and HTTP access on the inbound port",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": {
                        "Ref": "WebServerPort"
                    },
                    "ToPort": {
                        "Ref": "WebServerPort"
                    },
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "111",
                    "ToPort": "111",
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "udp",
                    "FromPort": "111",
                    "ToPort": "111",
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "2049",
                    "ToPort": "2049",
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "udp",
                    "FromPort": "32806",
                    "ToPort": "32806",
                    "CidrIp": "0.0.0.0/0"
                }
                ]
            }
        },
        "SparseMapDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.5",
                "DBSecurityGroups": [{
                    "Ref": "DBSecurityGroup"
                }],
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MultiAZ": {
                    "Ref": "MultiAZ"
                }
            },
            "DeletionPolicy": "Snapshot"
        },

        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "DBSecurityGroupIngress": {
                    "EC2SecurityGroupName": {
                        "Ref": "InstanceSecurityGroup"
                    }
                },
                "GroupDescription": "database access"
            }
        },

        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": {
                    "Fn::Join": ["", ["Alarm if ", {
                        "Ref": "DBName"
                    },
                    " CPU > ", {
                        "Fn::FindInMap": ["InstanceTypeMap", {
                            "Ref": "DBInstanceClass"
                        },
                        "CPULimit"]
                    },
                    "% for 5 minutes"]]
                },
                "Namespace": "AWS/RDS",
                "MetricName": "CPUUtilization",
                "Statistic": "Average",
                "Period": "60",
                "Threshold": {
                    "Fn::FindInMap": ["InstanceTypeMap", {
                        "Ref": "DBInstanceClass"
                    },
                    "CPULimit"]
                },
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "5",
                "AlarmActions": [{
                    "Ref": "AlarmTopic"
                }],
                "Dimensions": [{
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                        "Ref": "SparseMapDB"
                    }
                }]
            }
        },
        "FreeStorageSpace": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": {
                    "Fn::Join": ["", ["Alarm if ", {
                        "Ref": "DBName"
                    },
                    " storage space <= ", {
                        "Fn::FindInMap": ["InstanceTypeMap", {
                            "Ref": "DBInstanceClass"
                        },
                        "FreeStorageSpaceLimit"]
                    },
                    " for 5 minutes"]]
                },
                "Namespace": "AWS/RDS",
                "MetricName": "FreeStorageSpace",
                "Statistic": "Average",
                "Period": "60",
                "Threshold": {
                    "Fn::FindInMap": ["InstanceTypeMap", {
                        "Ref": "DBInstanceClass"
                    },
                    "FreeStorageSpaceLimit"]
                },
                "ComparisonOperator": "LessThanOrEqualToThreshold",
                "EvaluationPeriods": "5",
                "AlarmActions": [{
                    "Ref": "AlarmTopic"
                }],
                "Dimensions": [{
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                        "Ref": "SparseMapDB"
                    }
                }]
            }
        },
        "ReadIOPSHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": {
                    "Fn::Join": ["", ["Alarm if ", {
                        "Ref": "DBName"
                    },
                    " WriteIOPs > ", {
                        "Fn::FindInMap": ["InstanceTypeMap", {
                            "Ref": "DBInstanceClass"
                        },
                        "ReadIOPSLimit"]
                    },
                    " for 5 minutes"]]
                },
                "Namespace": "AWS/RDS",
                "MetricName": "ReadIOPS",
                "Statistic": "Average",
                "Period": "60",
                "Threshold": {
                    "Fn::FindInMap": ["InstanceTypeMap", {
                        "Ref": "DBInstanceClass"
                    },
                    "ReadIOPSLimit"]
                },
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "5",
                "AlarmActions": [{
                    "Ref": "AlarmTopic"
                }],
                "Dimensions": [{
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                        "Ref": "SparseMapDB"
                    }
                }]
            }
        },
        "WriteIOPSHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": {
                    "Fn::Join": ["", ["Alarm if ", {
                        "Ref": "DBName"
                    },
                    " WriteIOPs > ", {
                        "Fn::FindInMap": ["InstanceTypeMap", {
                            "Ref": "DBInstanceClass"
                        },
                        "WriteIOPSLimit"]
                    },
                    " for 5 minutes"]]
                },
                "Namespace": "AWS/RDS",
                "MetricName": "WriteIOPS",
                "Statistic": "Average",
                "Period": "60",
                "Threshold": {
                    "Fn::FindInMap": ["InstanceTypeMap", {
                        "Ref": "DBInstanceClass"
                    },
                    "WriteIOPSLimit"]
                },
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "5",
                "AlarmActions": [{
                    "Ref": "AlarmTopic"
                }],
                "Dimensions": [{
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                        "Ref": "SparseMapDB"
                    }
                }]
            }
        }
    },

    "Outputs": {
        "URL": {
            "Description": "URL of the sample website",
            "Value": {
                "Fn::Join": ["", ["http://", {
                    "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]
                }]]
            }
        },
        "JDBCConnectionString": {
            "Description": "JDBC connection string for database",
            "Value": {
                "Fn::Join": ["", ["jdbc:mysql://",
                {
                    "Fn::GetAtt": ["SparseMapDB", "Endpoint.Address"]
                },
                ":",
                {
                    "Fn::GetAtt": ["SparseMapDB", "Endpoint.Port"]
                },
                "/",
                {
                    "Ref": "DBName"
                }]]
            }
        },
        "DBAddress": {
            "Description": "Address of database endpoint",
            "Value": {
                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Address"]
            }
        },
        "DBPort": {
            "Description": "Database endpoint port number",
            "Value": {
                "Fn::GetAtt": ["SparseMapDB", "Endpoint.Port"]
            }
        }
    }
}